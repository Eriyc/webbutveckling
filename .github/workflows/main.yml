# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Install Dependencies
        run: |
          cd ./frontpage
          npm install
      - name: Build
        run: |
          cd ./frontpage  
          npm run build
      - name: Combine projects
        run: |
          mkdir hosted
          cp -vr ./frontpage/build/. ./hosted
          echo Frontpage was copied
          mkdir hosted/recipe
          cp -vr ./recipe ./hosted
          echo Recipe was copied
      - name: Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: dist
          path: hosted

  # This job will upload the commited dist-folder to firebase hosting
  deploy:
    name: Deploy
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: dist
          path: hosted
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-deploy-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deploy-${{ env.cache-name }}-
      - name: Deploy to Firebase
        uses: w9jds/firebase-action@master
        with:
          args: |
            target:apply hosting web web-dgrendev
            deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
